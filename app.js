const TelegramAPI = require('node-telegram-bot-api')

const keyboard =  require ('./module/keyboard')
const messageText =  require ('./module/text.js')

const mongoose = require('mongoose') // –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MongoDB
const User = require('./models/users'); // –µ–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


require('dotenv').config();

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å.
mongoose
    .connect(process.env.TOKENBD, {useNewUrlParser: true, useUnifiedTopology: true}) 
    .then((res) => console.log('Connection to DataBase...'))
    .catch( err => console.log(err));

const bd = mongoose;

const bot = new TelegramAPI(process.env.TOKEN, { polling: true})
const adm = new TelegramAPI(process.env.TOKEN2, { polling: true})

let NameButton = 'Button'
let LinkButton = 'https://t.me/tallliban'

bot.onText(/\/start/, async msg => {

    const ChatId = msg.chat.id;
    const UserName = msg.from.username;
    const RefferalId = msg.from.id;
    const UserId = msg.from.id;
    const Name = msg.from.first_name;

    const refferalCode = msg.text.split(" ").slice(1,2).join(" ");
    const userBD = await User.findOne({ UserId: UserId });

    if(!userBD) {
        const users = await new User({
            ChatId: ChatId,
            ReferralId: RefferalId,
            ReferralCount: 0,
            UserNumber: 0,
            MoneyCount: 0,
            UserName: UserName,
            Name: Name,
            UserId: UserId,
        });

        users
            .save()
            .then(res => console.log('new user in telegram bot!'))
            .catch(err => console.log(err))

        if(refferalCode) {
            let userRefferal = await User.findOne({ ReferralId: refferalCode });

            if (userRefferal) {
                UserRefferalCount = userRefferal.ReferralCount;
                UserMoneyCount = userRefferal.MoneyCount;

                UserRefferalCount++;
                UserMoneyCount = UserMoneyCount + 10;

            	await User.updateOne({ReferralId: refferalCode}, {$set: {ReferralCount : UserRefferalCount, MoneyCount: UserMoneyCount }})

            	bot.sendMessage(userRefferal.ReferralId, `üîî –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id=${msg.from.id}">–ø–∞—Ä—Ç–Ω—ë—Ä–∞</a> –∏ –ø–æ–ª—É—á–∏–ª–∏ +10‚ÇΩ
                \nüí∞–í—Å–µ–≥–æ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ ${UserRefferalCount} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –Ω–∞ —Å—á–µ—Ç—É —É –≤–∞—Å ${UserMoneyCount}‚ÇΩ`, { 
                    parse_mode: "HTML" 
                });
            }
        }
    }
    
    bot.sendMessage(ChatId, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π ${Name}, –≤—ã –≤—ã–±—Ä–∞–ª–∏:\n\nüîù–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é`,{ 
        parse_mode: "HTML",
        reply_markup: {
            keyboard: keyboard.start
        }
    });

})

bot.on('message', async msg => {

    const ChatId = msg.chat.id;
    const UserName = msg.from.username;
    const RefferalId = msg.from.id;
    const UserId = msg.from.id;
    const Name = msg.from.first_name;

    let userBD = await User.findOne({ UserId: UserId });

    switch(msg.text) {
        case '–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?üçÄ':
            bot.sendMessage(ChatId, messageText.how)
            break
        
        case '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞üí∞':
            bot.sendMessage(ChatId,`üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: https://t.me/referrallmoneyBot?start=${RefferalId}
            \nüí¥–ß—Ç–æ–± —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ, –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª '–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?'üí¥`)
            break

        case '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüí∏':
            bot.sendMessage(ChatId,`üëã –ü—Ä–∏–≤–µ—Ç ${Name}, –Ω—É –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∏–∂–µ.
            \nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å - ${userBD.MoneyCount}‚ÇΩ\n‚ÑπÔ∏è –í–∞—à —é–∑–µ—Ä - @${UserName}\nüÜîÔ∏è –í–∞—à ID - ${UserId}`)
            break

        case '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤üè¶':
            if (userBD.MoneyCount < 75) {
                bot.sendMessage(ChatId, `ü§∑‚Äç‚ôÇÔ∏è –ö–∞–∂–µ—Ç—Å—è —É —Ç–µ–±—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.
                    \nüí∏ –ú–∏–Ω –≤—ã–≤–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - 75‚ÇΩ, –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ QIWI/–°–±–µ—Ä–±–∞–Ω–∫/–¢–∏–Ω—å–∫–æ—Ñ`)
            }
            else {
                bot.sendMessage(ChatId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞üí∞
                    \n–¥–ª—è –≤—ã–≤–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–æ–ª—É—á–∏—Ç–µ ${userBD.MoneyCount}‚ÇΩüí∞`, { 
                        parse_mode: "HTML",
                        reply_markup: {
                            keyboard: keyboard.pay
                        }
                })
            }
            break
        
        case 'üîù–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 
            bot.sendMessage(ChatId, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π ${Name}, –≤—ã –≤—ã–±—Ä–∞–ª–∏:\n\nüîù–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é`,{ 
                parse_mode: "HTML",
                reply_markup: {
                    keyboard: keyboard.start
                }
            })
            break

        case '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìà':
            bot.sendMessage(ChatId, `üì° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ Refferal Money
                \nüìÜ –†–∞–±–æ—Ç–∞–µ–º –¥–Ω–µ–π: 79\n‚õÑÔ∏è –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 389\nüî• –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: 1\n\nüçÄ–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å`)
            break
        
        case '–ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—Éüí≤': 
            bot.sendMessage(ChatId, `–ü—Ä–∏–≤–µ—Ç, –∂–µ–ª–∞–µ—à—å –∫—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É?
                \n–¢–æ–≥–¥–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ —Ä–µ–∫–ª–∞–º–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ ‚¨áÔ∏è`, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: keyboard.advertising
                    }
            })
            break
    }
})

// –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
// –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

adm.onText(/\/postphoto/, async msg => {

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(2).join(" "); 

    //–ø–µ—Ä–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    const sendUrl = msg.text.split(" ").slice(1,2).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendPhoto(log[i].ChatId, sendUrl, {
            caption: sendText,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: NameButton,
                            callback_data: 'write',  
                            url: LinkButton
                        }
                    ],
                ],
            }
        })          
    }
})


// –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
// –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

adm.onText(/\/postvideo/, async msg => {

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(2).join(" "); 

    //–ø–µ—Ä–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ.
    const sendUrl = msg.text.split(" ").slice(1,2).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendVideo(log[i].ChatId, sendUrl, {
            caption: sendText,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: NameButton,
                            callback_data: 'write',  
                            url: LinkButton
                        }
                    ],
                ],
            }
        })        
    }
})


// –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –∑–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
// –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

adm.onText(/\/posttext/, async msg => {
    
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(1).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendMessage(log[i].ChatId, sendText, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: NameButton,
                            callback_data: 'write',  
                            url: LinkButton
                        }
                    ],
                ],
            }
        })       
    }
})
adm.onText(/\/nbtnposttext/, async msg => {
    
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(1).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendMessage(log[i].ChatId, sendText, {
            parse_mode: 'HTML',
            
        })         
    }
})

adm.onText(/\/nbtnpostphoto/, async msg => {

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(2).join(" "); 

    //–ø–µ—Ä–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    const sendUrl = msg.text.split(" ").slice(1,2).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {      
        bot.sendPhoto(log[i].ChatId, sendUrl, {
            caption: sendText,
            parse_mode: 'HTML',
        })        
    }
})

adm.onText(/\/namebutton/, async msg => {
    NameButton = msg.text.split(" ").slice(1,2).join(" ");
    
    const ChatId = msg.chat.id;

    adm.sendMessage(ChatId, `name button: ${NameButton}`, {
        parse_mode: 'HTML',
    })
    
})

adm.onText(/\/linkbutton/, async msg => {
    LinkButton = msg.text.split(" ").slice(1,2).join(" ");

    const ChatId = msg.chat.id;

    adm.sendMessage(ChatId, `link button: ${LinkButton}`, {
        parse_mode: 'HTML',
    })
})